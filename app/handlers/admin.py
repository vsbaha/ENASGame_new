from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from app.database import crud
from app.services.validators import is_admin
from app.filters.admin import AdminFilter
from aiogram.filters import StateFilter
from app.states import CreateTournament
from app.services.file_handling import save_file
from app.services.notifications import notify_super_admins
import logging
import os

from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from app.database.db import Tournament, Game, TournamentStatus, UserRole, User, Tournament, GameFormat, Team, User, Player, TeamStatus
from app.keyboards.admin import (
    admin_main_menu,
    tournaments_management_kb,
    tournament_actions_kb,
    back_to_admin_kb,
    team_request_kb,
    tournament_status_kb,
    team_request_preview_kb
)

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    
@router.callback_query(F.data == "stats")
async def show_stats(call: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = await crud.get_statistics(session)
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {stats['active_tournaments']}\n"
        f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {stats['teams']}"
    )
    await call.message.edit_text(text, reply_markup=back_to_admin_kb())
    
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(call: CallbackQuery):
    await call.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())


@router.callback_query(F.data == "manage_tournaments")
async def manage_tournaments(call: CallbackQuery, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)"""
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )
    
    # –î–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
    if user.role == UserRole.SUPER_ADMIN:
        tournaments = await session.scalars(select(Tournament))
    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º
    else:
        tournaments = await session.scalars(
            select(Tournament)
            .where(Tournament.status == TournamentStatus.APPROVED)
            .where(Tournament.created_by == user.id)
        )
    
    await call.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏:", 
        reply_markup=tournaments_management_kb(tournaments)
    )


    
# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data == "create_tournament")
async def start_creation(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ - –≤—ã–±–æ—Ä –∏–≥—Ä—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä
        games = await session.scalars(select(Game))
        if not games:
            await call.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã.", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–∞–º–∏
        builder = InlineKeyboardBuilder()
        for game in games:
            builder.button(
                text=game.name, 
                callback_data=f"admin_select_game_{game.id}"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            )
        builder.adjust(1)
        
        await call.message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=builder.as_markup())
        await state.set_state(CreateTournament.SELECT_GAME)
        logger.info(f"User {call.from_user.id} started tournament creation")

    except Exception as e:
        logger.error(f"Error in start_creation: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(
    StateFilter(CreateTournament.SELECT_GAME),
    F.data.startswith("admin_select_game_")
)
async def select_game(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    game_id = int(call.data.split("_")[3])
    game = await session.get(Game, game_id)
    if not game:
        await call.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    formats = await session.scalars(
        select(GameFormat).where(GameFormat.game_id == game_id)
    )
    formats = list(formats)
    if not formats:
        await call.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    for fmt in formats:
        builder.button(
            text=f"{fmt.format_name} (–¥–æ {fmt.max_players_per_team})",
            callback_data=f"admin_select_format_{fmt.id}"
        )
    builder.adjust(1)
    await call.message.edit_text(
        f"üéÆ –ò–≥—Ä–∞: <b>{game.name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.update_data(game_id=game_id)
    await state.set_state(CreateTournament.SELECT_FORMAT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
@router.callback_query(F.data.startswith("admin_select_format_"))
async def select_format(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    format_id = int(call.data.split("_")[3])
    fmt = await session.get(GameFormat, format_id)
    if not fmt:
        await call.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    await state.update_data(format_id=format_id)
    await call.message.edit_text(
        f"–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: <b>{fmt.format_name}</b>\nüè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="HTML"
    )
    await state.set_state(CreateTournament.NAME)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(CreateTournament.NAME)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üåÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø (—Ñ–æ—Ç–æ):")
    await state.set_state(CreateTournament.LOGO)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
@router.message(CreateTournament.LOGO, F.photo)
async def process_logo(message: Message, state: FSMContext, bot: Bot):
    file_id = message.photo[-1].file_id
    file_path = await save_file(bot, file_id, "tournaments/logos")
    await state.update_data(logo_path=file_path)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await state.set_state(CreateTournament.START_DATE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@router.message(CreateTournament.START_DATE)
async def process_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(start_date=date)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await state.set_state(CreateTournament.DESCRIPTION)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 01.01.2025 14:00")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(CreateTournament.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç (PDF):")
    await state.set_state(CreateTournament.REGULATIONS)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
@router.message(CreateTournament.REGULATIONS, F.document)
async def finish_creation(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    if message.document.mime_type != "application/pdf":
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã!")
    
    user = await session.scalar(
        select(User).where(User.telegram_id == message.from_user.id))
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–∑–æ–≤–∏—Ç–µ /start")
        await state.clear()
        return
    
    file_path = await save_file(bot, message.document.file_id, "tournaments/regulations")
    data = await state.get_data()

    status = (
        TournamentStatus.APPROVED 
        if user.role == UserRole.SUPER_ADMIN 
        else TournamentStatus.PENDING
    )
    
    tournament = Tournament(
        game_id=data['game_id'],
        format_id=data['format_id'],  # <--- –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ!
        name=data['name'],
        logo_path=data['logo_path'],
        start_date=data['start_date'],
        description=data['description'],
        regulations_path=file_path,
        is_active=True,
        status=status,
        created_by=user.id
    )
    
    session.add(tournament)
    await session.commit()
    
    if status == TournamentStatus.PENDING:
        # –ü–µ—Ä–µ–¥–∞–µ–º session –≤ —Ñ—É–Ω–∫—Ü–∏—é
        await notify_super_admins(
            bot=bot,
            text=f"–ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {data['name']}",
            session=session 
        )
    
    await message.answer(
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
        f"–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {data['start_date'].strftime('%d.%m.%Y %H:%M')}",
        parse_mode="HTML"
    )
    await state.clear()

    
@router.callback_query(F.data.startswith("edit_tournament_"))
async def show_tournament_details(call: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )

    if not tournament:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –û–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    if user.role == UserRole.ADMIN and (
        tournament.status != TournamentStatus.APPROVED 
        or tournament.created_by != user.id
    ):
        await call.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∏–≥—Ä—É
    game = await session.get(Game, tournament.game_id)

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.logo_path and os.path.exists(tournament.logo_path):
        try:
            logo = FSInputFile(tournament.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"üèÜ {tournament.name}"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.regulations_path and os.path.exists(tournament.regulations_path):
        try:
            regulations = FSInputFile(tournament.regulations_path)
            await call.message.answer_document(
                document=regulations,
                caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 3. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É)
    text = (
        f"üèÜ <b>{tournament.name}</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: {game.name if game else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üïí –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if tournament.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå'}"
    )
    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=tournament_actions_kb(tournament_id, tournament.is_active)
    )
    
@router.callback_query(F.data.startswith("delete_tournament_"))
async def delete_tournament(call: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Ñ–∞–π–ª–∞–º–∏"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    import os
    if os.path.exists(tournament.logo_path):
        os.remove(tournament.logo_path)
    if os.path.exists(tournament.regulations_path):
        os.remove(tournament.regulations_path)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await session.delete(tournament)
    await session.commit()
    
    await call.message.edit_text("‚úÖ –¢—É—Ä–Ω–∏—Ä –∏ –≤—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
@router.callback_query(F.data == "back_to_tournaments")
async def back_to_tournaments_list(call: CallbackQuery, session: AsyncSession):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        await call.message.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments = await session.scalars(select(Tournament))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        await call.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏:",
            reply_markup=tournaments_management_kb(tournaments)
        )
    except Exception as e:
        logging.error(f"Back error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞!")



@router.callback_query(F.data == "team_requests")
async def show_team_requests(call: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )
    
    if user.role != UserRole.SUPER_ADMIN:
        await call.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
    tournaments = await session.scalars(select(Tournament))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    requests = []
    for tournament in tournaments:
        teams = await tournament.teams  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        for team in teams:
            if getattr(team, "status", None) == TeamStatus.PENDING:
                requests.append((tournament, team))
    
    if not requests:
        await call.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏
    for tournament, team in requests:
        creator = await session.get(User, tournament.created_by)
        await call.message.bot.send_message(
            creator.telegram_id,
            f"üìù –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à —Ç—É—Ä–Ω–∏—Ä: {tournament.name}\n"
            f"–ö–æ–º–∞–Ω–¥–∞: {team.team_name}\n",
            reply_markup=team_request_preview_kb(team.id)
        )
    
    await call.answer("üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è–º —Ç—É—Ä–Ω–∏—Ä–æ–≤.")

@router.callback_query(F.data == "moderate_teams")
async def show_pending_teams(call: CallbackQuery, session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    # –î–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ ‚Äî –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã
    user = await session.scalar(select(User).where(User.telegram_id == call.from_user.id))
    if user.role == UserRole.SUPER_ADMIN:
        teams = await session.scalars(
            select(Team).where(Team.status == TeamStatus.PENDING)
        )
    else:
        # –¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç—Ç–∏–º –∞–¥–º–∏–Ω–æ–º
        tournaments = await session.scalars(
            select(Tournament.id).where(Tournament.created_by == user.id)
        )
        teams = await session.scalars(
            select(Team).where(
                Team.status == TeamStatus.PENDING,
                Team.tournament_id.in_(tournaments)
            )
        )
    teams = list(teams)
    if not teams:
        await call.message.edit_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.", reply_markup=back_to_admin_kb())
        return

    builder = InlineKeyboardBuilder()
    for team in teams:
        builder.button(
            text=f"{team.team_name} (—Ç—É—Ä–Ω–∏—Ä ID: {team.tournament_id})",
            callback_data=f"moderate_team_{team.id}"
        )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    await call.message.edit_text(
        "üìù –ó–∞—è–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("moderate_team_"))
async def moderate_team(call: CallbackQuery, session: AsyncSession):
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    tournament = await session.get(Tournament, team.tournament_id)
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    player_usernames = []
    for player in players:
        user = await session.scalar(select(User).where(User.telegram_id == player.user_id))
        if user:
            player_usernames.append(f"@{user.username or user.telegram_id}")
    text = (
        f"–ö–æ–º–∞–Ω–¥–∞: <b>{team.team_name}</b>\n"
        f"–¢—É—Ä–Ω–∏—Ä: {tournament.name if tournament else team.tournament_id}\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: <a href='tg://user?id={team.captain_tg_id}'>{team.captain_tg_id}</a>\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(player_usernames)}"
    )
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=team_request_kb(team.id)
    )
    
@router.callback_query(F.data.regexp(r"^(de)?activate_tournament_\d+$"))
async def toggle_tournament_status(call: CallbackQuery, session: AsyncSession):
    data = call.data
    tournament_id = int(data.split("_")[-1])
    tournament = await session.get(Tournament, tournament_id)
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
    if not tournament or not (
        user.role == UserRole.SUPER_ADMIN or tournament.created_by == user.id
    ):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!", show_alert=True)
        return

    if data.startswith("deactivate"):
        tournament.is_active = False
        await session.commit()
        await call.answer("–¢—É—Ä–Ω–∏—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    else:
        tournament.is_active = True
        await session.commit()
        await call.answer("–¢—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)

    # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await call.message.edit_reply_markup(
        reply_markup=tournament_status_kb(tournament_id, tournament.is_active)
    )
    
@router.callback_query(F.data.startswith("preview_team_"))
async def preview_team(call: CallbackQuery, session: AsyncSession):
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    tournament = await session.get(Tournament, team.tournament_id)
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    player_usernames = []
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    if captain and captain.username:
        captain_info = f"@{captain.username}"
    elif captain and captain.full_name:
        captain_info = captain.full_name
    else:
        captain_info = str(team.captain_tg_id)
    for player in players:
        user = await session.scalar(select(User).where(User.telegram_id == player.user_id))
        if user:
            player_usernames.append(f"@{user.username or user.telegram_id}")
    text = (
        f"–ö–æ–º–∞–Ω–¥–∞: <b>{team.team_name}</b>\n"
        f"–¢—É—Ä–Ω–∏—Ä: {tournament.name if tournament else team.tournament_id}\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {captain_info}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(player_usernames)}"
    )
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=team_request_kb(team.id)
    )